// automatically generated by the FlatBuffers compiler, do not modify

package jvm_toolbox_flatbuffers.inspector;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class OnClassFileLoad extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_9(); }
  public static OnClassFileLoad getRootAsOnClassFileLoad(ByteBuffer _bb) { return getRootAsOnClassFileLoad(_bb, new OnClassFileLoad()); }
  public static OnClassFileLoad getRootAsOnClassFileLoad(ByteBuffer _bb, OnClassFileLoad obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OnClassFileLoad __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public jvm_toolbox_flatbuffers.inspector.JavaClass class_() { return class_(new jvm_toolbox_flatbuffers.inspector.JavaClass()); }
  public jvm_toolbox_flatbuffers.inspector.JavaClass class_(jvm_toolbox_flatbuffers.inspector.JavaClass obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public jvm_toolbox_flatbuffers.inspector.JavaObject loader() { return loader(new jvm_toolbox_flatbuffers.inspector.JavaObject()); }
  public jvm_toolbox_flatbuffers.inspector.JavaObject loader(jvm_toolbox_flatbuffers.inspector.JavaObject obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public byte bytecode(int j) { int o = __offset(10); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int bytecodeLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector bytecodeVector() { return bytecodeVector(new ByteVector()); }
  public ByteVector bytecodeVector(ByteVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer bytecodeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer bytecodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }

  public static int createOnClassFileLoad(FlatBufferBuilder builder,
      int nameOffset,
      int class_Offset,
      int loaderOffset,
      int bytecodeOffset) {
    builder.startTable(4);
    OnClassFileLoad.addBytecode(builder, bytecodeOffset);
    OnClassFileLoad.addLoader(builder, loaderOffset);
    OnClassFileLoad.addClass(builder, class_Offset);
    OnClassFileLoad.addName(builder, nameOffset);
    return OnClassFileLoad.endOnClassFileLoad(builder);
  }

  public static void startOnClassFileLoad(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addClass(FlatBufferBuilder builder, int class_Offset) { builder.addOffset(1, class_Offset, 0); }
  public static void addLoader(FlatBufferBuilder builder, int loaderOffset) { builder.addOffset(2, loaderOffset, 0); }
  public static void addBytecode(FlatBufferBuilder builder, int bytecodeOffset) { builder.addOffset(3, bytecodeOffset, 0); }
  public static int createBytecodeVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createBytecodeVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startBytecodeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endOnClassFileLoad(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OnClassFileLoad get(int j) { return get(new OnClassFileLoad(), j); }
    public OnClassFileLoad get(OnClassFileLoad obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

