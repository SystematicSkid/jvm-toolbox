// automatically generated by the FlatBuffers compiler, do not modify

package jvm_toolbox_flatbuffers.inspector;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class OnFramePop extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_9(); }
  public static OnFramePop getRootAsOnFramePop(ByteBuffer _bb) { return getRootAsOnFramePop(_bb, new OnFramePop()); }
  public static OnFramePop getRootAsOnFramePop(ByteBuffer _bb, OnFramePop obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OnFramePop __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public jvm_toolbox_flatbuffers.inspector.JavaThread thread() { return thread(new jvm_toolbox_flatbuffers.inspector.JavaThread()); }
  public jvm_toolbox_flatbuffers.inspector.JavaThread thread(jvm_toolbox_flatbuffers.inspector.JavaThread obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public jvm_toolbox_flatbuffers.inspector.JavaMethod method() { return method(new jvm_toolbox_flatbuffers.inspector.JavaMethod()); }
  public jvm_toolbox_flatbuffers.inspector.JavaMethod method(jvm_toolbox_flatbuffers.inspector.JavaMethod obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public boolean wasPoppedByException() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createOnFramePop(FlatBufferBuilder builder,
      int threadOffset,
      int methodOffset,
      boolean wasPoppedByException) {
    builder.startTable(3);
    OnFramePop.addMethod(builder, methodOffset);
    OnFramePop.addThread(builder, threadOffset);
    OnFramePop.addWasPoppedByException(builder, wasPoppedByException);
    return OnFramePop.endOnFramePop(builder);
  }

  public static void startOnFramePop(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addThread(FlatBufferBuilder builder, int threadOffset) { builder.addOffset(0, threadOffset, 0); }
  public static void addMethod(FlatBufferBuilder builder, int methodOffset) { builder.addOffset(1, methodOffset, 0); }
  public static void addWasPoppedByException(FlatBufferBuilder builder, boolean wasPoppedByException) { builder.addBoolean(2, wasPoppedByException, false); }
  public static int endOnFramePop(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OnFramePop get(int j) { return get(new OnFramePop(), j); }
    public OnFramePop get(OnFramePop obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

